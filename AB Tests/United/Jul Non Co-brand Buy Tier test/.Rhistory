##load packages
library(ggplot2)
library(nortest)
library(car)
library(plyr)
library(coin)
## Set working directory
setwd("C:/Users/kelvin.ye/workplace/data-wizards/AB Tests/United/Jul Non Co-brand Buy Tier test")
##Load in data - I usually filter out sessions in Alteryx
df1<-read.csv("ATS_filtered.csv", header=T)
## summarize data
summary(df1)
## check data types
str(df1)
### Plot all the data by test and control Test_Types ###
###                                                   ###
##subset data into high/med as well as mass
df1<-subset(df1, df1$Test_Type=="4 Tiers" |  df1$Test_Type=="5 Tiers")
##df1_med<-subset(df1, df1$Test_Type=="Mass Control IHG" |  df1$Test_Type=="Mass Test IHG")
## This will filter out the sessions
df1<-subset(df1, df1$ATS != 0)
summary(df1)
##load packages
library(ggplot2)
library(nortest)
library(car)
library(plyr)
library(coin)
## Set working directory
setwd("C:/Users/kelvin.ye/workplace/data-wizards/AB Tests/United/Jul Non Co-brand Buy Tier test")
##Load in data - I usually filter out sessions in Alteryx
df1<-read.csv("ATS_filtered.csv", header=T)
## summarize data
summary(df1)
## check data types
str(df1)
### Plot all the data by test and control Test_Types ###
###                                                   ###
##subset data into high/med as well as mass
df1<-subset(df1, df1$Test_Type=="Test" |  df1$Test_Type=="Control")
##df1_med<-subset(df1, df1$Test_Type=="Mass Control IHG" |  df1$Test_Type=="Mass Test IHG")
## This will filter out the sessions
df1<-subset(df1, df1$ATS != 0)
summary(df1)
a_high <-ggplot(df1, aes(x = ATS, fill = Test_Type)) + geom_histogram(position="dodge")
a_high
b_high <-ggplot(df1, aes(x = log(ATS), fill = Test_Type)) + geom_histogram(position="dodge")
b_high
p_high<-ggplot(df1, aes(y = ATS, x=Test_Type, fill=Test_Type))+ stat_summary(fun.y="mean", geom="bar")
p_high + labs(y="Average Points Purchased", x="Offer") + theme(axis.text.x = element_text(colour="black",size=14), axis.title.x=element_text(colour="black",size=14), axis.text.y = element_text(colour="black",size=14), axis.title.y=element_text(colour="black",size=14) )
wilcox.test(df1$ATS~df1$Test_Type, conf.level=0.05) # 0.6413 not significant
kruskal.test(ATS~Test_Type, data=df1) # 0.6413 not significant
t.test(log(df1$ATS)~df1$Test_Type, conf.level=0.05, var.equal=FALSE) # 0.554 not significant
t.test?
?t.test
help(t.test())
help(t.test
help(t.test)
help(t.test)
library(Rserve)
Rserve()
Rserve(args="--no-save")
